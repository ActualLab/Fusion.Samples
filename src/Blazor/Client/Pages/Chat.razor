@page "/chat"
@using System.Threading
@using Stl
@inherits LiveComponentBase<Chat.Model, Chat.LocalsModel>
@inject IChatService ChatService
@inject ClientState ClientState
@inject NavigationManager Navigator

@{
    var locals = Locals.Value;
    var state = State.LastValue;
    var lastPage = state.LastPage;
    var error = State.Error;
}

<div>
    <span class="float-right">
        <span class="badge btn-primary">
            @(state.ActiveUserCount) <span class="oi oi-chat"></span>
        </span>
        <span class="badge btn-light">
            @(state.UserCount) <span class="oi oi-people"></span>
        </span>
    </span>
    <h1>Chat</h1>
</div>

<div class="alert alert-primary">
    Open <a href="@Navigator.Uri" target="_blank">this page</a> or
    <a href="/composition" target="_blank">Composition example</a>
    in another window to see everything is updated in sync in real time.
</div>
@if (locals.Error != null) {
    <div class="alert alert-danger" role="alert">
        @locals.Error.Message
    </div>
}
@if (error != null) {
    <div class="alert alert-warning" role="alert">
        Update error: @error.Message
    </div>
}

<form @onsubmit="@SetNameAsync">
    <div class="input-group pb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Your name</span>
        </div>
        <input class="form-control" @bind-value="@locals.Name"/>
        <div class="input-group-append">
            <button type="submit" class="btn btn-warning">Change</button>
        </div>
    </div>
</form>

<table class="table table-sm table-striped">
    <thead>
    <tr>
        <th scope="col">User</th>
        <th scope="col">Message</th>
    </tr>
    </thead>
    <tbody>
    @foreach(var message in lastPage.Messages) {
        var user = lastPage.Users[message.UserId];
        {
            <tr>
                <td style="width: 20%; max-width: 33%">@user.Name</td>
                <td style="width: auto; min-width: 67%">@message.Text</td>
            </tr>
        }
    }
    </tbody>
</table>

<form @onsubmit="SendMessageAsync">
    <div class="input-group pb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Message</span>
        </div>
        <input class="form-control"
            placeholder="No ideas? Send an empty one!"
            @bind-value="locals.Message" />
        <div class="input-group-append">
            <button type="submit" class="btn btn-success">Send</button>
        </div>
    </div>
</form>

@code {
    public class LocalsModel
    {
        public string Name { get; set; } = "";
        public string Message { get; set; } = "";
        public Exception? Error { get; set; }
    }

    public class Model
    {
        public long UserCount { get; set; } = 0;
        public long ActiveUserCount { get; set; } = 0;
        public ChatPage LastPage { get; set; } = new ChatPage();
    }

    private bool HasError => Locals.Value.Error != null;

    private ChatUser? ChatUser {
        get => ClientState.ChatUser.Value;
        set => ClientState.ChatUser.Value = value;
    }

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var userCount = await ChatService.GetUserCountAsync(cancellationToken);
        var activeUserCount = await ChatService.GetActiveUserCountAsync(cancellationToken);
        var lastPage = await ChatService.GetChatTailAsync(30, cancellationToken);
        return new Model() {
            UserCount = userCount,
            ActiveUserCount = activeUserCount,
            LastPage = lastPage,
        };
    }

    protected override async Task OnInitializedAsync()
    {
        if (ChatUser == null)
            // Let's pre-create the user
            await SetNameAsync();
        else
            ResetName();
    }

    private async Task SetNameAsync()
    {
        ResetError();
        var locals = Locals.Value;
        try {
            if (ChatUser != null) {
                try {
                    ChatUser = await ChatService.SetUserNameAsync(ChatUser.Id, locals.Name);
                    return;
                }
                catch {
                    // Prob. the user doesn't exist (server restarted), so we should try to recreate it.
                }
            }
            ChatUser = await ChatService.CreateUserAsync(locals.Name);
        }
        catch (Exception e) {
            SetError(e);
        }
        finally {
            if (!HasError)
                ResetName();
        }
   }

    private async Task SendMessageAsync()
    {
        ResetError();
        try {
            var locals = Locals.Value;
            if (ChatUser == null)
                throw new ApplicationException("Please set your name first.");
            await ChatService.AddMessageAsync(ChatUser.Id, locals.Message);
            Locals.Update(l => l.Message = "");
        }
        catch (Exception e) {
            SetError(e);
        }
    }

    // Convenience shortcuts

    private void ResetError()
        => SetError(null);

    private void ResetName()
    {
        var chatUser = ClientState.ChatUser.Value;
        Locals.Update(l => l.Name = chatUser?.Name ?? "");
    }

    private void SetError(Exception? error)
        => Locals.Update(l => l.Error = error);
}
