@page "/composition"
@using System.Threading
@inherits LiveComponentBase<Composition.Composed, Composition.Own>
@inject ILocalComposerService LocalComposer;
@inject IComposerService Composer;

@{
    var own = OwnState.Value;
    var state = State.LastValue;
    var error = State.Error;
}

<h1>Composition</h1>

@if (error != null) {
    <div class="alert alert-warning" role="alert">
        Update error: @error.Message
    </div>
}

<div class="input-group pb-3">
    <div class="input-group-prepend">
        <span class="input-group-text">Parameter</span>
    </div>
    <input class="form-control"
           @bind-value="@own.Parameter"
           @bind-value:event="oninput"
           @onkeyup="@OnParameterChange"/>
</div>

<div class="d-flex">
    <div class="col-6">
        <ComposedValueCard
            Title="Locally composed value"
            Source="@state.LocallyComposedValue"/>
    </div>
    <div class="col-6">
        <ComposedValueCard
            Title="Remotely composed value"
            Source="@state.RemotelyComposedValue"/>
    </div>
</div>

@code {
    public class Own
    {
        public string Parameter { get; set; } = "Type something here";
    }

    public class Composed
    {
        public ComposedValue LocallyComposedValue { get; set; } = new ComposedValue();
        public ComposedValue RemotelyComposedValue { get; set; } = new ComposedValue();
    }

    protected override void ConfigureState(LiveState<Composed, Own>.Options options)
        => options.WithUpdateDelayer(0.5);

    protected override async Task<Composed> ComputeStateAsync(ILiveState<Composed, Own> state, CancellationToken cancellationToken)
    {
        var local = state.OwnState.Value;
        var localValue = await LocalComposer.GetComposedValueAsync(local.Parameter, cancellationToken);
        var remoteValue = await Composer.GetComposedValueAsync(local.Parameter, cancellationToken);
        return new Composed() {
            LocallyComposedValue = localValue,
            RemotelyComposedValue = remoteValue,
        };
    }

    private void OnParameterChange()
        => OwnState.Value = OwnState.Value.Clone();
}
