@page "/composition"
@using System.Threading
@using Stl
@inherits LiveComponentBase<Composition.Model, Composition.LocalsModel>
@inject ILocalComposerService LocalComposer;
@inject IComposerService Composer;
@inject Session Session;
@inject NavigationManager Navigator

@{
    var locals = Locals.Value;
    var state = State.LastValue;
    var error = State.Error;
}

<h1>Composition</h1>

<div class="alert alert-primary">
    Open <a href="/chat" target="_blank">Chat</a>,
    <a href="/consistency" target="_blank">Consistency</a>, or
    <a href="/authentication" target="_blank">Authentication</a>
    examples in other window(s) to see how values on this page
    are updated in real-time due to changes made there.
</div>

<StatefulComponentState Component="@this" />

@if (error != null) {
    <div class="alert alert-warning" role="alert">
        Update error: @error.Message
    </div>
}

<div class="input-group pb-3">
    <div class="input-group-prepend">
        <span class="input-group-text">Parameter</span>
    </div>
    <input class="form-control"
           @bind-value="locals.Parameter"
           @bind-value:event="oninput"
           @onkeyup="OnParameterChange"/>
</div>

<div class="d-flex">
    <div class="col-6">
        <ComposedValueCard
            Title="Locally composed value"
            Source="@state.LocallyComposedValue"/>
    </div>
    <div class="col-6">
        <ComposedValueCard
            Title="Remotely composed value"
            Source="@state.RemotelyComposedValue"/>
    </div>
</div>

@code {
    public class LocalsModel
    {
        public string Parameter { get; set; } = "Type something here";
    }

    public class Model
    {
        public ComposedValue LocallyComposedValue { get; set; } = new ComposedValue();
        public ComposedValue RemotelyComposedValue { get; set; } = new ComposedValue();
    }

    protected override void OnInitialized()
    {
        // StateEventHandlers.All is needed to make StatefulComponentState react to all state changes
        UsedStateEventHandlers = StateEventHandlers.All;
        base.OnInitialized();
    }

    protected override void ConfigureState(LiveState<Model, LocalsModel>.Options options)
        => options.WithUpdateDelayer(0.5);

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var locals = Locals.Value;
        var localValue = await LocalComposer.GetComposedValueAsync(locals.Parameter, Session, cancellationToken);
        var remoteValue = await Composer.GetComposedValueAsync(locals.Parameter, Session, cancellationToken);
        return new Model() {
            LocallyComposedValue = localValue,
            RemotelyComposedValue = remoteValue,
        };
    }

    private void OnParameterChange()
        => Locals.Update(l => {});
}
