@using System.Threading
@inherits LiveComponentBase<double, AccumulatorCard.LocalsModel>
@inject ISumService SumService

@{
    var accumulator = State.LastValue;
    var locals = Locals.Value;
    var error = State.Error;
}

<div class="@CssClass">
    <div class="card-header">Accumulator</div>

    <div class="card-body">
        <StatefulComponentState Component="@this" />

        @if (error != null) {
            <div class="alert alert-warning" role="alert">
                Update error: @error.Message
            </div>
        }

        <div class="mb-2">
            Value: <b>@accumulator</b>
            <button class="btn btn-warning btn-sm" @onclick="ResetAsync">Reset</button>
        </div>

        <form @onsubmit="AccumulateAsync">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Value</span>
                </div>
                <input class="form-control" @bind-value="locals.Value" />
                <div class="input-group-append">
                    <button type="submit" class="btn btn-success">Accumulate</button>
                </div>
            </div>
        </form>

    </div>
</div>

@code {
    public class LocalsModel
    {
        public double Value { get; set; } = 1;
    }

    [Parameter]
    public string CssClass { get; set; } = "card";
    [Parameter]
    public TimeSpan UpdateDelay { get; set; } = TimeSpan.FromSeconds(1);

    protected override void OnInitialized()
    {
        StateHasChangedTriggers = StateEventKind.All;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (State?.UpdateDelayer is UpdateDelayer updateDelayer)
            updateDelayer.Delay = UpdateDelay;
    }

    protected override void ConfigureState(LiveState<double>.Options options)
        => options.WithUpdateDelayer(UpdateDelay);

    protected override Task<double> ComputeStateAsync(CancellationToken cancellationToken)
        => SumService.GetAccumulatorAsync(cancellationToken);

    // Action handlers

    private async Task ResetAsync()
    {
        await SumService.ResetAsync();
        State.CancelUpdateDelay();
    }

    private async Task AccumulateAsync()
    {
        await SumService.AccumulateAsync(Locals.Value.Value);
        State.CancelUpdateDelay();
    }
}
