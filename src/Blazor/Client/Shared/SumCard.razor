@using System.Threading
@inherits LiveComponentBase<double, SumCard.LocalsModel>
@inject ISumService SumService

@{
    var sum = State.LastValue;
    var locals = State.Locals.Value;
    var error = State.Error;
}

<div class="@CssClass">
    <div class="card-header">@Title</div>

    <div class="card-body">
        <StatefulComponentState Component="@this" />

        @if (error != null) {
            <div class="alert alert-warning" role="alert">
                Update error: @error.Message
            </div>
        }

        <div class="input-group mb-1">
            <div class="input-group-prepend">
                <span class="input-group-text">A:</span>
            </div>
            <input class="form-control" @bind-value="locals.ValueA" @bind-value:event="oninput" @onkeyup="Apply"/>
        </div>

        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">B:</span>
            </div>
            <input class="form-control" @bind-value="locals.ValueB" @bind-value:event="oninput" @onkeyup="Apply"/>
        </div>

    </div>

    <div class="card-footer">
        @locals.ValueA + @locals.ValueB + Accumulator = <b>@sum</b>
    </div>
</div>

@code {
    public class LocalsModel
    {
        public double ValueA { get; set; } = 1;
        public double ValueB { get; set; } = 2;
    }

    [Parameter]
    public string CssClass { get; set; } = "card";
    [Parameter]
    public string Title { get; set; } = "Sum";
    [Parameter]
    public TimeSpan UpdateDelay { get; set; } = TimeSpan.FromSeconds(1);

    protected override void OnInitialized()
    {
        // StateEventHandlers.All is needed to make StatefulComponentState react to all state changes
        UsedStateEventHandlers = StateEventHandlers.All;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
        => State?.UpdateDelayer.SetUpdateDelay(UpdateDelay);

    protected override void ConfigureState(LiveState<double, LocalsModel>.Options options)
        => options.WithUpdateDelayer(UpdateDelay);

    protected override async Task<double> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var locals = Locals.Value;
        var values = new[] { locals.ValueA, locals.ValueB };
        return await SumService.SumAsync(values, true, cancellationToken).ConfigureAwait(false);
    }

    // Action handlers

    private void Apply() => Locals.Invalidate(true);
}
