@page "/chat"
@using System.Threading
@using Stl.Fusion.Authentication.Commands
@inherits MixedStateComponent<Chat.Model, Chat.LocalsModel>
@inject Session Session
@inject IChatService ChatService
@inject UICommandRunner CommandRunner
@inject NavigationManager Navigator
@inject ILogger<Chat> Log

@{
    var locals = MutableState.Value;
    var state = State.LatestNonErrorValue;
    var lastPage = state.LastPage;
    var error = State.Error;
}

<div>
    <div class="float-right">
        <Badge Color="Color.Light">
            @(state.UserCount) <Blazorise.Icon Name="FontAwesomeIcons.Users"/>
        </Badge>
        <Badge Color="Color.Primary">
            @(state.ActiveUserCount) <Blazorise.Icon Name="FontAwesomeIcons.Plug"/>
        </Badge>
    </div>
    <h1>Chat</h1>
</div>

<Note>
    Open <a href="@Navigator.Uri" target="_blank">this page</a> or
    <a href="/composition" target="_blank">Composition example</a>
    in another window to see everything is updated in sync in real time.
</Note>

<WhenUpdateError Exception="@error"/>

<AuthorizeView>
    <Authorized>
        @if (state.ChatUser.Name != locals.Name) {
            <Badge Color="Color.Primary">Current name: @state.ChatUser.Name</Badge>
        }
        <form @onsubmit="SetName">

            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel>Your name</AddonLabel>
                </Addon>
                <TextEdit @bind-Text="@locals.Name" type="search" />
                <Addon>
                    <Button Type="@ButtonType.Submit" Color="Color.Warning">Change</Button>
                </Addon>
            </Addons>
        </form>
    </Authorized>
</AuthorizeView>

<Table Narrow="true" Striped="true" Margin="Margin.Is3.OnY">
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell>User</TableHeaderCell>
            <TableHeaderCell>Message</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach(var message in lastPage.Messages) {
            var user = lastPage.Users[message.UserId];
            <TableRow>
                <TableRowCell Style="width: 20%; max-width: 33%">@user.Name</TableRowCell>
                <TableRowCell Style="width: auto; min-width: 67%">@message.Text</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<AuthorizeView>
    <Authorized>
        <form @onsubmit="Post">
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel>Message</AddonLabel>
                </Addon>
                <TextEdit @bind-Text="@locals.Message" Placeholder="No ideas? Send an empty one!" type="search" />
                <Addon AddonType="AddonType.End">
                    <Button Type="@ButtonType.Submit" Color="Color.Success">Send</Button>
                </Addon>
            </Addons>
        </form>
    </Authorized>
    <NotAuthorized>
        <SignInDropdown Why="to chat"></SignInDropdown>
    </NotAuthorized>
</AuthorizeView>

@code {
    public class LocalsModel
    {
        private string _name = "";

        public string Name {
            get => _name;
            set {
                if (_name == value)
                    return;
                _name = value;
                IsNameModified = true;
            }
        }

        public bool IsNameModified { get; set; }
        public string Message { get; set; } = "";
    }

    public class Model
    {
        public long UserCount { get; set; }
        public long ActiveUserCount { get; set; }
        public ChatUser ChatUser { get; set; } = ChatUser.None;
        public ChatPage LastPage { get; set; } = new();
    }

    protected override void OnInitialized()
    {
        // Mutable state content is updated implicitly via bind-* here,
        // and since such a change doesn't trigger State recompute + StateHasChanged(),
        // we enable this feat. to make it happen on event.
        EnableStateHasChangedCallAfterEvent = true;
        base.OnInitialized();
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var userCount = await ChatService.GetUserCount(cancellationToken);
        var activeUserCount = await ChatService.GetActiveUserCount(cancellationToken);
        var chatUser = await ChatService.GetCurrentUser(Session, cancellationToken);
        var lastPage = await ChatService.GetChatTail(30, cancellationToken);
        if (!MutableState.Value.IsNameModified)
            ResetName(chatUser.IsValid ? chatUser.Name : "");
        return new Model() {
            UserCount = userCount,
            ActiveUserCount = activeUserCount,
            ChatUser = chatUser,
            LastPage = lastPage,
        };
    }

    private async Task SetName()
    {
        var locals = MutableState.Value;
        var command = new EditUserCommand(Session, locals.Name ?? "");
        try {
            await CommandRunner.Run(new LocalCommand(() => {
                if (command.Name!.Length < 4)
                    throw new ApplicationException("The name should be at least 4 character long.");
            }), true);
            await CommandRunner.Run(command, true);
        }
        catch (Exception e) {
            Log.LogError(e, "Error!");
        }
   }

    private async Task Post()
    {
        try {
            await CommandRunner.Run(new IChatService.PostCommand(MutableState.Value.Message, Session), true);
            MutableState.Value.Message = "";
            MutableState.Invalidate();
        }
        catch (Exception e) {
            Log.LogError(e, "Error!");
        }
    }

    // Convenience shortcuts

    private void ResetName(string name)
    {
        MutableState.Value.Name = name;
        MutableState.Value.IsNameModified = false;
        MutableState.Invalidate();
    }
}
