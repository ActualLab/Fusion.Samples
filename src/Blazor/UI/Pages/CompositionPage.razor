@page "/composition"
@using System.Threading
@inherits MixedStateComponent<CompositionPage.Model, string>
@inject Session Session;
@inject ILocalComposerService LocalComposer;
@inject IComposerService Composer;

@{
    var state = State.LastNonErrorValue;
    var error = State.Error;
}

<h1>Composition</h1>

<Note>
    Open <a href="/chat" target="_blank">Chat</a>,
    <a href="/consistency" target="_blank">Consistency</a>, or
    <a href="/authentication" target="_blank">Authentication</a>
    examples in other window(s) to see how values on this page
    are updated in real-time due to changes made there.
</Note>

<StateOfStateBadge State="@State" />

<WhenUpdateError Exception="@error"/>

<Addons>
    <Addon AddonType="AddonType.Start">
        <AddonLabel>Parameter</AddonLabel>
    </Addon>
    <TextEdit @bind-Text="@MutableState.Value" Placeholder="Type something here" type="search" />
</Addons>

<Row Margin="Margin.Is3.OnY">
    <Column ColumnSize="ColumnSize.Is6">
        <ComposedValueCard
            Title="Locally composed value"
            Source="@state.LocallyComposedValue"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <ComposedValueCard
            Title="Remotely composed value"
            Source="@state.RemotelyComposedValue"/>
    </Column>
</Row>

@code {
    public class Model
    {
        public ComposedValue LocallyComposedValue { get; set; } = new ComposedValue();
        public ComposedValue RemotelyComposedValue { get; set; } = new ComposedValue();
    }

    protected override MutableState<string>.Options GetMutableStateOptions()
        => new () { InitialValue = "" };

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () {
            InitialValue = new(),
            UpdateDelayer =  new UpdateDelayer(Services.UIActionTracker(), 0.5),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var parameter = MutableState.Value;
        var localValue = await LocalComposer.GetComposedValue(Session, parameter, cancellationToken);
        var remoteValue = await Composer.GetComposedValue(Session, parameter, cancellationToken);
        return new Model() {
            LocallyComposedValue = localValue,
            RemotelyComposedValue = remoteValue,
        };
    }
}
