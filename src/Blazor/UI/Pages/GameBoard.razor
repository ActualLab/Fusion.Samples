@page "/game/{Address}"
@using Stl.Reflection
@using Samples.Blazor.UI.UIHelpers
@using System.Threading
@inject NavigationManager navigator
@inject IBoardService BoardService
@inject ClientState ClientState
@inject Session Session
@inherits LiveComponentBase<GameBoard.Model, GameBoard.LocalsModel>

@{
    var locals = Locals.Value;
    var error = State.Error;
    var state = State.LastValue;
    var boardState = state.BoardState;
}

<h3>Tic Tac Toe</h3>
<hr>

@{
    var gameStatus = Helper.CalculateGameStatus(state.BoardState.ToCharArray());
    string status;
    if (gameStatus == Helper.GameStatus.X_wins)
    {
        status = "Winner: X";
        _boardStyleHandler = "pointer-events: none;";
    }
    else if (gameStatus == Helper.GameStatus.O_wins)
    {
        status = "Winner: O";
        _boardStyleHandler = "pointer-events: none;";
    }
    else if (gameStatus == Helper.GameStatus.Draw)
    {
        status = "Draw";
        _boardStyleHandler = "pointer-events: none;";
    }
    else
    {
        char nextPlayer = state.IsXTurn ? 'X' : 'O';
        status = $"Turn: {nextPlayer}";
        _boardStyleHandler = "";
    }
    <h4>@status</h4>
}

@if (string.IsNullOrWhiteSpace(Address))
{
    <TicTacToeGame />
}
else
{
    if (!_allowView)
    {
    }
    else
    {
        <div class="board" id="@(Address)" style="@_boardStyleHandler">
            @for (int i = 0; i < 9; i++)
            {
                int squareNumber = i;
                <Square @key=squareNumber
                         Value=boardState[squareNumber]
                         ClickHandler="() => SquareHandler(squareNumber, state.IsXTurn)"
                         />
            }

        </div>

        <button class="btn btn-primary"
                @onclick="PlayAgainHandler"
                disabled="@IsDisabled">
            New game
        </button>
        <hr>
        <h5>BoardId: @(Address)</h5>
        @*<h5>Players without clones: @(locals.PlayersCount)</h5>*@
    }
}


@code {
    [Parameter]
    public string Address { get; set; }

    private string _boardId;
    private Board _board;
    private bool _turnX = true;
    private string _values = "         ";
    private long playersCount;

    private bool _xIsNext;
    private bool _allowView;
    private string _boardStyleHandler = "";
    private Player playerX;
    private Player playerO;
    private bool IsDisabled => Helper.CalculateGameStatus(State.Value.BoardState.ToCharArray()) == Helper.GameStatus.NotYetFinished;

    public class LocalsModel
    {
        public string BoardState { get; set; } = "         ";
        public bool IsXTurn { get; set; } = true;
        public long PlayersCount { get; set; } = 0;
    }

    public class Model
    {
        public string BoardId { get; set; } = "";
        public bool IsXTurn { get; set; } = true;
        public string BoardState { get; set; } = "         ";
    }
    
    private Board? Board {
        get => ClientState.Board.Value;
        set => ClientState.Board.Value = value;
    }

    private async Task PlayAgainHandler()
    {
        if (Board == null)
        {
            await GetOrCreateBoardAsync();
            return;
        }
        Board = await BoardService.ClearBoardAsync(Board.BoardId);
    }
    
    private async Task GetOrCreateBoardAsync()
    {
        Board ??= await BoardService.GetBoardAsync(Address);
        UpdateLocals(l => l.BoardState = Board.BoardState);
        UpdateLocals(l => l.IsXTurn = Board.IsXTurn);
    }

    protected override async Task OnInitializedAsync()
    {
        if (Board == null)
            await GetOrCreateBoardAsync();
        _allowView = true;
        
        var pCount = await BoardService.GetPlayerCountWithoutCloneAsync(Board.BoardId);
        var result = await BoardService.CreatePlayerAsync(Board.BoardId, Session.Id).ConfigureAwait(false);
        await BoardService.GetPlayerAsync(result.Item2).ConfigureAwait(false);
        if (pCount == 0)
        {
            var clone = await BoardService.CreatePlayerCloneAsync(result.Item2, Board.BoardId).ConfigureAwait(false);
        }
        pCount = await BoardService.GetPlayerCountWithoutCloneAsync(Board.BoardId);
        playersCount = pCount;

        UpdateLocals(l => l.BoardState = Board.BoardState);
        UpdateLocals(l => l.PlayersCount = playersCount);
        await Task.CompletedTask;
    }

    private async Task SquareHandler(int squareNum, bool turnX)
    {
        Board = await BoardService.ChangeBoardStateAsync(Board.BoardId, squareNum, turnX);
        UpdateLocals(l => l.BoardState = Board.BoardState);
        UpdateLocals(l => l.IsXTurn = Board.IsXTurn);
    }

    private async Task AddPlayer()
    {
        string sessionId = Session.Id;
        bool isClone = false;
        var t1 = Task.Run(() => BoardService.CreatePlayerAsync(Address, sessionId, isClone));
        await Task.WhenAll(t1);
        var result = t1.Result;
        // var result = BoardService.CreatePlayerAsync(_boardId, sessionId, isClone).Result;
        if (result.Item1 == false)
        {
            navigator.NavigateTo("/game");
        } else
        {
            var player = BoardService.GetPlayerAsync(result.Item2).Result;
            if (player.IsXPlayer)
            {
                playerX = player;
                Debug.WriteLine("This is Player X");
            }
            else
            {
                playerO = player;
                Debug.WriteLine("This is Player O");
            }
        }
    }

    // protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    // {
    //     var board = await BoardService.GetBoardAsync(Address, cancellationToken).ConfigureAwait(false);
    //     return new Model()
    //     {
    //         BoardId = board.BoardId,
    //         BoardState = board.BoardState,
    //         IsXTurn = board.IsXTurn
    //     };
    // }
    
    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
    var board = await BoardService.GetBoardAsync(Address, cancellationToken).ConfigureAwait(false);
    return new Model()
    {
        BoardId = board.BoardId,
        BoardState = board.BoardState,
        IsXTurn = board.IsXTurn
    };
    }
    
        
    protected override void ConfigureState(LiveState<Model>.Options options)
        => options.WithUpdateDelayer(0);
    
    private void UpdateLocals(Action<LocalsModel> updater)
    {
        // var clone = MemberwiseCloner.Clone(Locals.Value);
        var clone = MemberwiseCloner.Invoke(Locals.Value);
        updater.Invoke(clone);
        Locals.Value = clone;
    }
}

<style scoped>
    .board {
        display: grid;
        grid-template-columns: auto auto auto;
        background-color: orange;
        padding: 10px;
        width: 200px;
        height: 200px;
        border-radius: 5%;
    }

    button {
        border-radius: 10%;
        margin: 10px;
    }
</style>