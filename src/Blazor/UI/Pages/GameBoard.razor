@page "/game/{Address}"
@using Stl.Reflection
@using Samples.Blazor.UI.UIHelpers
@using System.Threading
@using System.Runtime.CompilerServices
@inject NavigationManager navigator
@inject IBoardService BoardService
@inject Session Session
@inherits LiveComponentBase<GameBoard.Model, GameBoard.LocalsModel>

@{
    var locals = Locals.Value;
    var error = State.Error;
    // var state = State.LastValue;
    // var boardState = state.BoardState;
}

<h3>Tic Tac Toe</h3>
<hr>

@{
    var gameStatus = Helper.CalculateGameStatus(locals.BoardState.ToCharArray());
    string status;
    if (gameStatus == Helper.GameStatus.X_wins)
    {
        status = "Winner: X";
        // _boardStyleHandler = boardStyle[1];
        // ChangeStyle();
    }
    else if (gameStatus == Helper.GameStatus.O_wins)
    {
        status = "Winner: O";
        // _boardStyleHandler = boardStyle[1];
        // ChangeStyle();
    }
    else if (gameStatus == Helper.GameStatus.Draw)
    {
        status = "Draw";
        // _boardStyleHandler = boardStyle[1];
        // ChangeStyle();
    }
    else
    {
        char nextPlayer = locals.IsXTurn ? 'X' : 'O';
        status = $"Turn: {nextPlayer}";
    }
    <h4>@status</h4>
}

@if (string.IsNullOrWhiteSpace(Address))
{
    <TicTacToeGame />
}
else
{
    if (!_allowView)
    {
    }
    else
    {
        <p>@Address</p>
        <div class="board" id="@(Address)" style="@_boardStyleHandler">
            @for (int i = 0; i < 9; i++)
            {
                int squareNumber = i;
                <Square @key=squareNumber
                         Value=locals.BoardState[squareNumber]
                         ClickHandler="() => SquareHandler(Address, squareNumber, locals.IsXTurn)"
                         />
            }

        </div>

        <button class="btn btn-primary"
                @onclick="PlayAgainHandler"
                disabled="@IsDisabled">
            New game
        </button>
        <hr>
        <h5>BoardId: @(Address)</h5>
        <div>Turn: @(locals.IsXTurn ? 'X' : 'O')</div>
    }
}


@code {
    [Parameter]
    public string Address { get; set; }

    private string _boardId;
    private Board _board;
    private bool _turnX = true;
    private string _values = "         ";

    private bool _xIsNext;
    private bool _allowView;
    private string _boardStyleHandler = "";
    private Player playerX;
    private Player playerO;
    private bool IsDisabled => Helper.CalculateGameStatus(Locals.LastValue.BoardState.ToCharArray()) == Helper.GameStatus.NotYetFinished;

    public class LocalsModel
    {
        public string BoardState { get; set; } = "         ";
        public bool IsXTurn { get; set; } = true;
    }

    public class Model
    {
        public Board Board { get; set; } = null;
    }

    private async Task PlayAgainHandler()
    {
        _board = await BoardService.ClearBoardAsync(Address);
        Locals.Value.BoardState = _board.BoardState;
        Locals.Value.IsXTurn = _board.IsXTurn;
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (_board == null)
        {
            _boardId = Address;
            try
            {
                _board = BoardService.GetBoardAsync(_boardId).Result;
            }
            catch (Exception ex)
            {
                _board = BoardService.CreateBoardAsync(_boardId).Result;
            }
        }
        // try
        // {
        //     _playersCount = await GetBoardPlayersCountWithoutClone();
        //     if(_playersCount > 1)
        //         navigator.NavigateTo("/game");
        // }
        // catch (Exception ex)
        // {
        //     _playersCount = 0;
        // }

        // Locals.Value.BoardId = _boardId;
        // Locals.Value.BoardState = _board.BoardState;
        // Locals.Value.IsXTurn = _board.IsXTurn;

        // _boardId = _board.BoardId;
        // _values = _board.BoardState;
        // _turnX = _board.IsXTurn;
        _allowView = true;
        var pCount = BoardService.GetPlayerCountWithoutCloneAsync(_boardId).Result;
        if (pCount < 2)
        {
            await AddPlayer();
        }
        Locals.Value.BoardState = _board.BoardState;
        Locals.Value.IsXTurn = _board.IsXTurn;
        await Task.CompletedTask;
    }
    
    protected override void ConfigureState(LiveState<Model>.Options options)
        => options.WithUpdateDelayer(0);

    private async Task SquareHandler(string boardId, int squareNum, bool turnX)
    {
        _board = await BoardService.ChangeBoardStateAsync(boardId, squareNum, turnX);
        Locals.Value.BoardState = _board.BoardState;
        Locals.Value.IsXTurn = _board.IsXTurn;
        State.CancelUpdateDelay();
    }

    private async Task AddPlayer()
    {
        string sessionId = Session.Id;
        bool isClone = false;
        var result = BoardService.CreatePlayerAsync(_boardId, sessionId, isClone).Result;
        if (result.Item1 == false)
        {
            navigator.NavigateTo("/game");
        } else
        {
            var player = BoardService.GetPlayerAsync(result.Item2).Result;
            if (player.IsXPlayer)
            {
                playerX = player;
                Debug.WriteLine("This is Player X");
            }
            else
            {
                playerO = player;
                Debug.WriteLine("This is Player O");
            }
        }
    }

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        _board = await BoardService.GetBoardAsync(_boardId, cancellationToken).ConfigureAwait(false);
        return new Model()
        {
            Board = _board
        };
    }
}

<style scoped>
    .board {
        display: grid;
        grid-template-columns: auto auto auto;
        background-color: orange;
        padding: 10px;
        width: 200px;
        height: 200px;
        border-radius: 5%;
    }

    button {
        border-radius: 10%;
        margin: 10px;
    }
</style>