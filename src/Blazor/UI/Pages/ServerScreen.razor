@page "/serverScreen"
@using System.Threading
@using System.Globalization
@inherits LiveComponentBase<Screenshot>
@inject IScreenshotService ScreenshotService

@{
    var screenshot = State.LatestNonErrorValue;
    var error = State.Error;
}

<h1>Server Screen</h1>

<WhenException Title="Update error:" Exception="@error"/>

<Addons>
    <Addon AddonType="AddonType.Start"><AddonLabel>Screenshot width (in pixels):</AddonLabel></Addon>
    <TextEdit @bind-Text="@Width" type="search" />
    @if (Width != ActualWidth.ToString(CultureInfo.InvariantCulture)) {
        <Addon AddonType="AddonType.End"><AddonLabel>(actual width: @ActualWidth)</AddonLabel></Addon>
    }
</Addons>

<Paragraph Margin="Margin.Is3.OnY">
    <img src="data:image/jpeg;base64,@screenshot.Base64Content" alt="Server screen" width="100%"/><br/>
</Paragraph>

@code {
    [Parameter]
    public string Width { get; set; } = "1280"; // Parameter changes trigger InvalidateState() by default
    public int ActualWidth => Math.Max(8, Math.Min(1920, int.TryParse(Width, out var v) ? v : 0));

    protected override async Task OnInitializedAsync()
        => await State.Update(); // An example showing how to load the State before the first render

    protected override void ConfigureState(LiveState<Screenshot>.Options options)
        => options.WithUpdateDelayer(0); // We need zero update delay here

    protected override Task<Screenshot> ComputeState(CancellationToken cancellationToken)
        => ScreenshotService.GetScreenshot(ActualWidth, cancellationToken);
}
