@page "/serverScreen"
@using System.Threading
@inherits LiveComponentBase<Screenshot, ServerScreen.LocalsModel>
@inject IScreenshotService ScreenshotService

@{
    var locals = Locals.Value;
    var error = State.Error;
}

<h1>Server Screen</h1>

<WhenException Title="Update error:" Exception="@error"/>

<Addons>
    <Addon AddonType="AddonType.Start"><AddonLabel>Screenshot width (in pixels):</AddonLabel></Addon>
    <TextEdit Text="@locals.WidthText" TextChanged="@OnWidthChanged" type="search" />
    @if (locals.WidthText != locals.Width.ToString()) {
        <Addon AddonType="AddonType.End"><AddonLabel>(actual width: @locals.Width)</AddonLabel></Addon>
    }
</Addons>

<Paragraph Margin="Margin.Is3.OnY">
    <img src="data:image/jpeg;base64,@State.LastValue.Base64Content" alt="Server screen" width="100%"/><br/>
</Paragraph>

@code {
    public class LocalsModel
    {
        public string WidthText { get; set; } = "1280";
        public int Width => Math.Max(8, Math.Min(1920, int.TryParse(WidthText, out var v) ? v : 0));
    }

    protected override async Task OnInitializedAsync()
        => await State.UpdateAsync(false); // An example showing how to load the State before the first render

    protected override void ConfigureState(LiveState<Screenshot>.Options options)
        => options.WithUpdateDelayer(0);

    protected override Task<Screenshot> ComputeStateAsync(CancellationToken cancellationToken)
        => ScreenshotService.GetScreenshotAsync(Locals.Value.Width, cancellationToken);

    private void OnWidthChanged(string widthText)
    {
        Locals.Value.WidthText = widthText;
        State.CancelUpdateDelay();
    }
}
