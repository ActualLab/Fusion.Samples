@page "/serverStream"
@using System.Threading
@using System.Globalization
@using Stl.Channels
@implements IDisposable
@inject IScreenshotService Screenshots

@{
    _fps.AddFrame();
    var fps = _fps.Value.ToString("N1");
    var src = "data:image/jpeg;base64," + Convert.ToBase64String(_screenshot.Data);
}
<style>
.fps {
    position: absolute;
    z-index: 1;
    top: 5px;
    left: 10px;
    font-size: 1.5rem;
    color: white
}
</style>

<h1>Screencast - via Stl.Rpc (RpcStream)</h1>

<Addons>
    <Addon AddonType="AddonType.Start"><AddonLabel>Screenshot width (in pixels):</AddonLabel></Addon>
    <TextEdit @bind-Text="EditableWidth" type="search" />
    @if (Width != ParsedWidth.ToString(CultureInfo.InvariantCulture)) {
        <Addon AddonType="AddonType.End"><AddonLabel>(actual width: @ParsedWidth)</AddonLabel></Addon>
    }
</Addons>

<Paragraph Margin="Margin.Is3.OnY" Style="position: relative">
    <span class="fps">FPS: <b>@fps</b></span>
    <img src="@src" alt="Server screen" width="99.9%"/><br/>
</Paragraph>

@code {
    private readonly FpsCounter _fps = new();
    private CancellationTokenSource? _stopCts;
    private Screenshot _screenshot = new();
    private string _editableWidth = "";

    private string EditableWidth {
        get => _editableWidth;
        set {
            _editableWidth = value;
            RestartStreaming();
        }
    }

    private int ParsedWidth
        => Math.Max(8, Math.Min(1920, int.TryParse(EditableWidth, out var v) ? v : 0));

    [Parameter]
    public string Width { get; set; } = "1280"; // Parameter changes trigger InvalidateState() by default

    public void Dispose()
        => _stopCts.CancelAndDisposeSilently();

    protected override void OnInitialized()
    {
        EditableWidth = Width;
        RestartStreaming();
    }

    private void RestartStreaming()
    {
        _stopCts.CancelAndDisposeSilently();
        _stopCts = new CancellationTokenSource();
        _screenshot = new();
        StateHasChanged();
        var width = ParsedWidth;
        var frameDuration = TimeSpan.FromSeconds(1.0 / IScreenshotService.FrameRate);
        var bufferDuration = TimeSpan.FromSeconds(1);
        var delayLag = -2 * frameDuration;
        var resetLag = 2 * bufferDuration;
        var cancellationToken = _stopCts.Token;
        _ = Task.Run(async () => {
            while (!cancellationToken.IsCancellationRequested) {
                try {
                    Console.WriteLine("Getting new stream...");
                    var screenshots = await Screenshots.StreamScreenshots(width, cancellationToken).ConfigureAwait(false);
                    var bufferedScreenshots = screenshots.WithBuffer((int)(bufferDuration / frameDuration), cancellationToken);
                    var firstFrameAt = default(CpuTimestamp);
                    var firstFrameOffset = default(TimeSpan);
                    await foreach (var screenshot in bufferedScreenshots.ConfigureAwait(false)) {
                        if (firstFrameAt == default) {
                            firstFrameAt = CpuTimestamp.Now + 0.5 * bufferDuration; // Playing at 50% of buffer size
                            firstFrameOffset = screenshot.FrameOffset;
                        }
                        var displayAt = firstFrameAt + (screenshot.FrameOffset - firstFrameOffset);
                        var lag = CpuTimestamp.Now - displayAt;
                        if (lag < delayLag) {
                            // Wait & buffer more
                            var delay = delayLag - lag;
                            Console.WriteLine("Lag: {0:N0}ms -> delay {0:N0}ms", delay.TotalMilliseconds);
                            await Task.Delay(delay, cancellationToken).ConfigureAwait(false);
                        }
                        else {
                            if (lag > resetLag) {
                                Console.WriteLine("!!! Lag: {0:N0}ms -> reset");
                                break; // Restart streaming: the lag is too big
                            }
                            if (lag > bufferDuration) {
                                Console.WriteLine("! Lag: {0:N0}ms -> skip frame");
                                continue; // Skip the frame & display the next one
                            }
                        }
                        await InvokeAsync(() => {
                            _screenshot = screenshot;
                            StateHasChanged();
                        }).ConfigureAwait(false);
                    }
                }
                catch {
                    // Retrying until cancellation
                    await Task.Delay(250, cancellationToken).ConfigureAwait(false);
                }
            }
        }, cancellationToken);
    }
}
