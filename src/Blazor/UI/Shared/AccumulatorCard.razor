@using System.Threading
@using Stl
@using System.Reactive
@using System.Globalization
@inherits MixedStateComponent<double, AccumulatorCard.LocalModel>
@inject ISumService _sumService
@inject UICommandRunner _uiCommandRunner

@{
    var accumulator = State.LatestNonErrorValue;
    var locals = MutableState.Value;
    var error = State.Error;
}

<Card Class="@CssClass">
    <CardHeader>Accumulator</CardHeader>

    <CardBody>
        <StateOfStateBadge State="@State" />

        <WhenUpdateError Exception="@error"/>

        <Paragraph Margin="Margin.Is3.OnY">
            Value: <b>@accumulator</b>
            <Button Color="Color.Warning" @onclick="Reset">Reset</Button>
        </Paragraph>

        <form @onsubmit="Accumulate">
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel>Increment by</AddonLabel>
                </Addon>
                <TextEdit @bind-Text="@locals.ValueText" type="search" />
                <Addon>
                    <Button Type="@ButtonType.Submit" Color="Color.Success">Increment</Button>
                </Addon>
            </Addons>
        </form>

    </CardBody>
</Card>

@code {
    public class LocalModel
    {
        public string ValueText { get; set; } = "1";
        public double Value => double.TryParse(ValueText, out var v) ? v : 0;
    }

    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public TimeSpan UpdateDelay { get; set; } = TimeSpan.FromSeconds(1);

    protected override void OnParametersSet()
        => State.UpdateDelayer = new UpdateDelayer(Services.UICommandTracker(), UpdateDelay);

    protected override MutableState<LocalModel>.Options GetMutableStateOptions()
        => new () { InitialValue = new() };

    protected override ComputedState<double>.Options GetStateOptions()
        => new () { UpdateDelayer = new UpdateDelayer(Services.UICommandTracker(), UpdateDelay) };

    protected override Task<double> ComputeState(CancellationToken cancellationToken)
        => _sumService.GetAccumulator(cancellationToken);

    // Action handlers

    private async Task Reset()
        => await _uiCommandRunner.Run(LocalCommand.New(() => _sumService.Reset()));

    private async Task Accumulate()
        => await _uiCommandRunner.Run(LocalCommand.New(() => _sumService.Accumulate(MutableState.Value.Value)));
}
