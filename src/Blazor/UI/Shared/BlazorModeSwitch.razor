@using Stl.OS
@using System.Web
@using System.Reflection
@inject BlazorModeHelper BlazorModeHelper
@inject IJSRuntime JS

@if (_isPrerendering) {
    <span>Loading...</span>
} else {
    <RadioGroup Class="@CssClass" TValue="bool"
                Name="BlazorMode"
                CheckedValue="@(BlazorModeHelper.IsBlazorServer)"
                CheckedValueChanged="@(v => BlazorModeHelper.ChangeMode(!v))">
        @foreach(var mode in new [] {true, false}) {
            <Radio TValue="bool" Value="@mode">@GetModeName(mode)</Radio>
        }
    </RadioGroup>
}

@code {
    private bool _isPrerendering;

    [Parameter]
    public string CssClass { get; set; } = "";

    protected override void OnInitialized()
    {
        var jsRuntimeType = JS.GetType();
        if (jsRuntimeType.Name != "RemoteJSRuntime") {
            _isPrerendering = false;
            return;
        }
        var fClientProxy = jsRuntimeType.GetField("_clientProxy", BindingFlags.Instance | BindingFlags.NonPublic);
        var clientProxy = fClientProxy?.GetValue(JS);
        _isPrerendering = fClientProxy != null && clientProxy == null;
    }

    private string GetModeName(bool isBlazorServer)
        => isBlazorServer ? "Blazor Server" : "Blazor WebAssembly";
}
