@implements IDisposable
@*
    StateOfStateBadge:
    - Displays the current state of provided 'State' (Invalidated/Updating/Updated).
    - Updates on state change without re-rendering the parent component.
*@

<Div Margin="Margin.Is1.OnY">
    <span>Component state: </span>
    @if (IsLoading) {
        <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
        <b>Loading...</b>
    } else if (IsUpdating) {
        <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
        <b>Updating...</b>
    } else if (IsInvalidated) {
        <div class="spinner-grow spinner-grow-sm text-secondary" role="status"></div>
        <b class="text-secondary">Invalidated...</b>
    } else {
        <span class="oi oi-check" aria-hidden="true"></span>
        <b>In sync.</b>
    }
</Div>

@code {
    private readonly Action<State, StateEventKind> _stateOfStateChangedHandler;
    private volatile StateSnapshot? _snapshot = null!;

#pragma warning disable BL0007
    [Parameter]
    public State? State {
        get => _snapshot?.State;
        set {
            var oldState = _snapshot?.State;
            if (ReferenceEquals(oldState, value))
                return;

            _snapshot = null;
            oldState?.RemoveEventHandler(StateEventKind.All, _stateOfStateChangedHandler);
            value?.AddEventHandler(StateEventKind.All, _stateOfStateChangedHandler);
            _snapshot = value?.Snapshot;
        }
    }
#pragma warning restore BL0007

    private bool IsLoading => _snapshot == null || _snapshot.UpdateCount == 0;
    private bool IsUpdating => _snapshot is { } s && s.WhenUpdating().IsCompleted;
    private bool IsInvalidated => _snapshot is { } s && s.Computed.IsInvalidated();

    public StateOfStateBadge()
        => _stateOfStateChangedHandler = (_, _) => InvokeAsync(OnStateOfStateChanged);

    public virtual void Dispose()
        => State = null!;

    private void OnStateOfStateChanged()
    {
        _snapshot = _snapshot?.State.Snapshot;
        StateHasChanged();
    }
}
