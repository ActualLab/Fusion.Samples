@using System.Threading
@inherits MixedStateComponent<double, SumCard.LocalModel>
@inject ISumService _sumService

@{
    var sum = State.LatestNonErrorValue;
    var locals = MutableState.Value;
    var error = State.Error;
}

<Card Class="@CssClass">
    <CardHeader>@Title</CardHeader>

    <CardBody>
        <StateOfStateBadge State="@State" />

        <WhenException Title="Update error:" Exception="@error"/>

        <Addons Margin="Margin.Is3.OnY">
            <Addon AddonType="AddonType.Start">
                <AddonLabel>A</AddonLabel>
            </Addon>
            <input class="form-control" type="search" @bind-value="locals.ValueA" @bind-value:event="oninput" @onkeyup="Apply"/>
        </Addons>

        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel>B</AddonLabel>
            </Addon>
            <input class="form-control" type="search" @bind-value="locals.ValueB" @bind-value:event="oninput" @onkeyup="Apply"/>
        </Addons>
    </CardBody>

    <CardFooter>
        @locals.ValueA + @locals.ValueB + Accumulator = <b>@sum</b>
    </CardFooter>
</Card>

@code {
    public class LocalModel
    {
        public double ValueA { get; set; }
        public double ValueB { get; set; }
    }

    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string Title { get; set; } = "Sum";
    [Parameter]
    public TimeSpan UpdateDelay { get; set; } = TimeSpan.FromSeconds(1);

    protected override void OnParametersSet()
        => State.UpdateDelayer = new UpdateDelayer(Services.UICommandTracker(), UpdateDelay);

    protected override MutableState<LocalModel>.Options GetMutableStateOptions()
        => new () { InitialValue = new() };

    protected override ComputedState<double>.Options GetStateOptions()
        => new () { UpdateDelayer = new UpdateDelayer(Services.UICommandTracker(), UpdateDelay) };

    protected override async Task<double> ComputeState(CancellationToken cancellationToken)
    {
        var locals = MutableState.Value;
        var values = new[] { locals.ValueA, locals.ValueB };
        return await _sumService.GetSum(values, true, cancellationToken);
    }

    // Action handlers

    private void Apply()
        => MutableState.Invalidate();
}
