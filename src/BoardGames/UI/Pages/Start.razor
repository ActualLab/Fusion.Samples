@page "/start/{GameEngineId}"
@using System.Threading
@using System.Collections.Immutable
@using System.Security
@inherits LiveComponentBase<Start.Model>
@inject IGameService Games
@inject IGameUserService GameUsers
@inject IEnumerable<IGameEngine> GameEngines;
@inject Session Session
@inject NavigationManager Navigator

@{
    var model = State.LastValue;
    var error = State.Error;
}

<h1>@GameEngine.Title</h1>

<MatchingComponentFor Source="@GameEngine" SourceParameterName="GameEngine" Scope="@ComponentScopes.GameRules" />

<WhenCommandError Exception="@CommandError" />

<AuthorizeView>
    <Authorized>
        <Button Color="Color.Primary" @onclick="_ => OnStartAsync()">Start a new game</Button>
    </Authorized>
    <NotAuthorized>
        <SignInDropdown Why="to start or join the game" />
    </NotAuthorized>
</AuthorizeView>

<Heading Size="HeadingSize.Is3">Open games</Heading>

<WhenUpdateError Exception="@error" />

<Table Narrow="true" Striped="true">
    <TableHeader>
        <TableHeaderCell>Creator</TableHeaderCell>
        <TableHeaderCell>Players</TableHeaderCell>
        <TableHeaderCell>Created at</TableHeaderCell>
        <TableHeaderCell>Join</TableHeaderCell>
    </TableHeader>
    <TableBody>
        @foreach(var game in model.PublicGames) {
            <TableRow>
                <TableRowCell>
                    <GameUserBadge User="@model.GetUser(game.UserId)"/>
                </TableRowCell>
                <TableRowCell>
                    <GameUsersBadge Users="@game.Players.Select(p => model.GetUser(p.UserId))"/>
                </TableRowCell>
                <TableRowCell>
                    <MomentsAgoBadge Time="@game.CreatedAt"/>
                </TableRowCell>
                <TableRowCell>
                    @if (User.IsAuthenticated) {
                        <Button Size="Size.Small" Color="Color.Info"
                                Type="@ButtonType.Link" To="@($"/play/{game.Id}")">Join</Button>
                    }
                </TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

@code {
    public record Model {
        public ImmutableList<Game> OwnGames { get; init; } = ImmutableList<Game>.Empty;
        public ImmutableList<Game> PublicGames { get; init; } = ImmutableList<Game>.Empty;
        public ImmutableDictionary<long, GameUser> Users { get; init; } = ImmutableDictionary<long, GameUser>.Empty;

        public GameUser GetUser(long userId) => Users.GetValueOrDefault(userId) ?? GameUser.None;
    }

    [Parameter]
    public string GameEngineId { get; set; } = "";
    [CascadingParameter]
    private Task<AuthState> AuthStateTask { get; set; } = null!;
    private AuthState AuthState { get; set; } = new(new User("")); // For SSB pre-render
    private User User => AuthState.User;
    private IGameEngine GameEngine { get; set; } = null!;
    private Exception? CommandError { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        GameEngine = GameEngines.Single(e => e.Id == GameEngineId);
        AuthState = await AuthStateTask;
    }

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var ownGames = ImmutableList<Game>.Empty;
        try {
            ownGames = await Games.ListOwnAsync(GameEngine.Id, GameStage.Created, 100, Session, cancellationToken);
        }
        catch (SecurityException) {
            // The user is not authenticated, but it's fine here
        }
        var publicGames = await Games.ListAsync(GameEngine.Id, GameStage.Created, 100, cancellationToken);
        var allGames = ownGames.Concat(publicGames).ToList();
        var userIds = allGames
            .SelectMany(g => g.Players.Select(p => p.UserId))
            .Concat(allGames.Select(g => g.UserId))
            .ToHashSet();
        var users = await userIds.ParallelSelectToListAsync((id, ct) => GameUsers.FindAsync(id, ct), cancellationToken);
        return new Model() {
            OwnGames = ownGames,
            PublicGames = publicGames,
            Users = users.Where(u => u != null).ToImmutableDictionary(u => u!.Id)!,
        };
    }

    private async Task OnStartAsync()
    {
        SetCommandError();
        try {
            var game = await Games.CreateAsync(new Game.CreateCommand(Session, GameEngine.Id));
            Navigator.NavigateTo($"/play/{game.Id}");
        }
        catch (Exception e) {
            SetCommandError(e);
        }
    }

    private void SetCommandError(Exception? commandError = null)
    {
        if (CommandError == commandError)
            return;
        CommandError = commandError;
        StateHasChanged();
    }

}
