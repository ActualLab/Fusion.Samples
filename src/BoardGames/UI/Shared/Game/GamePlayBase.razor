@using Samples.BoardGames.UI.Pages

@code {
    [Parameter]
    public PlayPage.Model Model { get; set; } = null!;
    [Parameter]
    public IGameEngine GameEngine { get; set; } = null!;
    [Inject]
    protected Session Session { get; set; } = null!;
    [Inject]
    protected CommandRunner CommandRunner { get; set; } = null!;

    // Helper properties
    protected Game Game { get; set; } = null!;
    protected ImmutableDictionary<long, GameUser> Users { get; set; } = ImmutableDictionary<long, GameUser>.Empty;
    protected ImmutableList<GameUser> OrderedUsers { get; set; } = ImmutableList<GameUser>.Empty;
    protected GameUser Me { get; set; } = GameUser.None;
    protected GameState GameState { get; set; } = null!;
    protected bool IsOwner => Me.Id == Game.UserId;
    protected bool IsParticipant => !IsOwner && Users.ContainsKey(Me.Id);

    protected override Task OnParametersSetAsync()
    {
        CommandRunner.Component = this;
        Game = Model.Game;
        Users = Model.Users;
        OrderedUsers = Game.Players.Select(p => Users[p.UserId]).ToImmutableList();
        Me = Model.Me;
        GameState = Game.State ?? GameEngine.New();
        return Task.CompletedTask;
    }
}
