@using ActualLab.Fusion.Blazor
@using ActualLab.Fusion.Server.Endpoints

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>ActualLab.Samples.Blazor</title>
    <base href="/" />
    <link rel="icon" type="image/png" href="@Assets["favicon.png"]"/>
    <link rel="stylesheet" href="@Assets["css/app.css"]"/>
    <ImportMap />
    <BlazoriseStyles/>
    <script src="@Assets["js/app.js"]"></script>
    <HeadOutlet @rendermode="@(_renderMode?.Mode)" />
</head>
<body>
    <App @rendermode="@(_renderMode?.Mode)" SessionId="@_sessionId" RenderModeKey="@(_renderMode?.Key)"/>
    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">🗙</span>
    </div>
    <BlazoriseScripts/>
    <script src="_framework/blazor.web.js"></script>
</body>
</html>

@code {
    private bool _isInitialized;
    private RenderModeDef? _renderMode; // Static by default
    private string _sessionId = "";

    [Inject] private ISessionResolver SessionResolver { get; init; } = null!;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        // We want to postpone the very first render till the moment the async code below completes.
        // That's why we override SetParametersAsync instead of OnInitializedAsync.
        if (!_isInitialized) {
            _isInitialized = true;
            parameters.SetParameterProperties(this); // This call must be executed ASAP
            if (HttpContext.AcceptsInteractiveRouting())
                _renderMode = RenderModeEndpoint.GetRenderMode(HttpContext);
            _sessionId = SessionResolver.Session.Id;
        }
        await base.SetParametersAsync(parameters);
    }
}
