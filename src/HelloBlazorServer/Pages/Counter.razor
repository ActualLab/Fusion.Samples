@page "/counter"
@using System.Threading
@inherits LiveComponentBase<string>
@inject CounterService CounterService
@inject TimeService TimeService
@inject NavigationManager Navigator

<h1>Counter</h1>

<p>
    Open this page in <a href="@Navigator.Uri" target="_blank">another window</a>
    to see it updates in sync in real time.
</p>

<p>Count: @State.LastValue</p>

<button class="btn btn-primary" @onclick="IncrementAsync">Increment</button>

@code {
    protected override async Task<string> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var (count, changeTime) = await CounterService.GetCounterAsync().ConfigureAwait(false);
        var momentsAgo = await TimeService.GetMomentsAgoAsync(changeTime).ConfigureAwait(false);
        return $"{count}, changed {momentsAgo}";
    }

    private async Task IncrementAsync()
    {
        await CounterService.IncrementCounterAsync();
        // The next Invalidate(true) call is optional:
        // it cancels active update delay, nothing else.
        // You can comment it out & see it still works,
        // though the counter changes with 0.5s delay
        // (the default update delay is set to 0.5s in Startup.cs).
        State.Invalidate(true);
    }
}
