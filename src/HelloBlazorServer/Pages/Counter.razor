@page "/counter"
@using System.Threading
@inherits LiveComponentBase<string>
@inject CounterService CounterService
@inject TimeService TimeService
@inject NavigationManager Navigator

@{
    var state = State.LastValue;
    var error = State.Error;
}

<h1>Counter</h1>

<div class="alert alert-primary">
    Open this page in <a href="@Navigator.Uri" target="_blank">another window</a> to see it updates in sync.
</div>
@if (error != null) {
    <div class="alert alert-warning" role="alert">Update error: @error.Message</div>
}

<p>Count: @state</p>

<button class="btn btn-primary" @onclick="IncrementAsync">Increment</button>

@code {
    protected override async Task<string> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var (count, changeTime) = await CounterService.GetCounterAsync();
        var momentsAgo = await TimeService.GetMomentsAgoAsync(changeTime);
        return $"{count}, changed {momentsAgo}";
    }

    private async Task IncrementAsync()
    {
        await CounterService.IncrementCounterAsync();
        // The next call just improves UX: it cancels active update delay.
        // You can comment it out & see everything still works, though the
        // counter updates with 0.5s delay.
        // The default update delay is set to 0.5s in Startup.cs (~ line 33).
        State.CancelUpdateDelay();
    }
}
