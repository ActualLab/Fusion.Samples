@page "/fetchdata"
@using System.Threading
@inherits LiveComponentBase<WeatherForecast[], DateTime>
@inject WeatherForecastService ForecastService

@{
    var state = State.LastValue ?? Array.Empty<WeatherForecast>();
    var error = State.Error;
}

<h1>Weather forecast</h1>

@if (error != null) {
    <div class="alert alert-warning" role="alert">
        Update error: @error.Message
    </div>
}

<p>This component demonstrates fetching data from a service.</p>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in state)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
    </tbody>
</table>

@code {
    protected override void ConfigureLocals(MutableState<DateTime>.Options options)
        => options.InitialOutputFactory = _ => DateTime.Today;

    protected override Task<WeatherForecast[]> ComputeStateAsync(CancellationToken cancellationToken)
        => ForecastService.GetForecastAsync(Locals.Value, cancellationToken);
}
