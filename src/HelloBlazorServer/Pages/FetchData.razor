@page "/fetchdata"
@using System.Threading
@inherits LiveComponentBase<WeatherForecast[], DateTime>
@inject WeatherForecastService ForecastService

@{
    // Let's read this property once per render
    var forecasts = State.LastValue;
}

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override void ConfigureState(LiveState<WeatherForecast[], DateTime>.Options options)
        => options.OwnStateOptions.InitialOutputFactory = _ => DateTime.Today;

    protected override Task<WeatherForecast[]> ComputeStateAsync(
        ILiveState<WeatherForecast[], DateTime> state, CancellationToken cancellationToken)
        => ForecastService.GetForecastAsync(state.OwnState.Value, cancellationToken);
}
